// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: bundle.proto

package bundle

import (
	dsse "github.com/secure-systems-lab/dsse"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashAlgorithm int32

const (
	HashAlgorithm_SHA2_224     HashAlgorithm = 0
	HashAlgorithm_SHA2_256     HashAlgorithm = 1
	HashAlgorithm_SHA2_384     HashAlgorithm = 2
	HashAlgorithm_SHA2_512     HashAlgorithm = 3
	HashAlgorithm_SHA2_512_224 HashAlgorithm = 4
	HashAlgorithm_SHA2_512_256 HashAlgorithm = 5
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0: "SHA2_224",
		1: "SHA2_256",
		2: "SHA2_384",
		3: "SHA2_512",
		4: "SHA2_512_224",
		5: "SHA2_512_256",
	}
	HashAlgorithm_value = map[string]int32{
		"SHA2_224":     0,
		"SHA2_256":     1,
		"SHA2_384":     2,
		"SHA2_512":     3,
		"SHA2_512_224": 4,
		"SHA2_512_256": 5,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_bundle_proto_enumTypes[0].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_bundle_proto_enumTypes[0]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{0}
}

type AttestationBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In JSON encoding this shall be base64 encoded.
	PayloadHash []byte        `protobuf:"bytes,1,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	Algorithm   HashAlgorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=sigstore.HashAlgorithm" json:"algorithm,omitempty"`
	// In JSON encoding this shall be base64 encoded.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AttestationBlob) Reset() {
	*x = AttestationBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationBlob) ProtoMessage() {}

func (x *AttestationBlob) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationBlob.ProtoReflect.Descriptor instead.
func (*AttestationBlob) Descriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{0}
}

func (x *AttestationBlob) GetPayloadHash() []byte {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *AttestationBlob) GetAlgorithm() HashAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return HashAlgorithm_SHA2_224
}

func (x *AttestationBlob) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RekorEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIndex int64  `protobuf:"varint,1,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	LogId    string `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	// Even if kind can be derived from the attestation type it's kept
	// as this struct could be automatically created by the sigstore
	// library based on the response from Rekor. Also during verification
	// this struct can be passed to the library for Rekor entry
	// reconstruction. By duplicating the kind here we would so minimize
	// any possibility of error due to attestation/kind matching logic,
	// as that logic must be hardcoded in the client. With this construct
	// it's only determined during publish to Rekor.
	Kind                 string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Version              string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	SignedEntryTimestamp string `protobuf:"bytes,5,opt,name=signed_entry_timestamp,json=signedEntryTimestamp,proto3" json:"signed_entry_timestamp,omitempty"`
	IntegratedTime       int64  `protobuf:"varint,6,opt,name=integrated_time,json=integratedTime,proto3" json:"integrated_time,omitempty"`
}

func (x *RekorEntry) Reset() {
	*x = RekorEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RekorEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RekorEntry) ProtoMessage() {}

func (x *RekorEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RekorEntry.ProtoReflect.Descriptor instead.
func (*RekorEntry) Descriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{1}
}

func (x *RekorEntry) GetLogIndex() int64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *RekorEntry) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *RekorEntry) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RekorEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RekorEntry) GetSignedEntryTimestamp() string {
	if x != nil {
		return x.SignedEntryTimestamp
	}
	return ""
}

func (x *RekorEntry) GetIntegratedTime() int64 {
	if x != nil {
		return x.IntegratedTime
	}
	return 0
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional unauthenticated hint on which key to use.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{2}
}

func (x *PublicKey) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type X509Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PEM encoded certificate.
	Certificate string `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// PEM encoded certificate chain.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *X509Cert) Reset() {
	*x = X509Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Cert) ProtoMessage() {}

func (x *X509Cert) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Cert.ProtoReflect.Descriptor instead.
func (*X509Cert) Descriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{3}
}

func (x *X509Cert) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *X509Cert) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application/vnd.dev.sigstore.bundle.v1+json
	MediaType  string      `protobuf:"bytes,1,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	RekorEntry *RekorEntry `protobuf:"bytes,2,opt,name=rekor_entry,json=rekorEntry,proto3,oneof" json:"rekor_entry,omitempty"`
	// Types that are assignable to VerificationMaterial:
	//	*Bundle_PublicKey
	//	*Bundle_X509Cert
	VerificationMaterial isBundle_VerificationMaterial `protobuf_oneof:"verification_material"`
	// Types that are assignable to Attestation:
	//	*Bundle_Blob
	//	*Bundle_Dsse
	Attestation isBundle_Attestation `protobuf_oneof:"attestation"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bundle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_bundle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_bundle_proto_rawDescGZIP(), []int{4}
}

func (x *Bundle) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Bundle) GetRekorEntry() *RekorEntry {
	if x != nil {
		return x.RekorEntry
	}
	return nil
}

func (m *Bundle) GetVerificationMaterial() isBundle_VerificationMaterial {
	if m != nil {
		return m.VerificationMaterial
	}
	return nil
}

func (x *Bundle) GetPublicKey() *PublicKey {
	if x, ok := x.GetVerificationMaterial().(*Bundle_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *Bundle) GetX509Cert() *X509Cert {
	if x, ok := x.GetVerificationMaterial().(*Bundle_X509Cert); ok {
		return x.X509Cert
	}
	return nil
}

func (m *Bundle) GetAttestation() isBundle_Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

func (x *Bundle) GetBlob() *AttestationBlob {
	if x, ok := x.GetAttestation().(*Bundle_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *Bundle) GetDsse() *dsse.Envelope {
	if x, ok := x.GetAttestation().(*Bundle_Dsse); ok {
		return x.Dsse
	}
	return nil
}

type isBundle_VerificationMaterial interface {
	isBundle_VerificationMaterial()
}

type Bundle_PublicKey struct {
	PublicKey *PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type Bundle_X509Cert struct {
	X509Cert *X509Cert `protobuf:"bytes,4,opt,name=x509_cert,json=x509Cert,proto3,oneof"`
}

func (*Bundle_PublicKey) isBundle_VerificationMaterial() {}

func (*Bundle_X509Cert) isBundle_VerificationMaterial() {}

type isBundle_Attestation interface {
	isBundle_Attestation()
}

type Bundle_Blob struct {
	Blob *AttestationBlob `protobuf:"bytes,5,opt,name=blob,proto3,oneof"`
}

type Bundle_Dsse struct {
	Dsse *dsse.Envelope `protobuf:"bytes,6,opt,name=dsse,proto3,oneof"`
}

func (*Bundle_Blob) isBundle_Attestation() {}

func (*Bundle_Dsse) isBundle_Attestation() {}

var File_bundle_proto protoreflect.FileDescriptor

var file_bundle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x0e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x35, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x08, 0x58, 0x35, 0x30, 0x39,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xe0, 0x02, 0x0a,
	0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x78, 0x35, 0x30, 0x39,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x78, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x69, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x62, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x04,
	0x64, 0x73, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x69, 0x6e, 0x74, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x64, 0x73, 0x73, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2a,
	0x6b, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x32, 0x32, 0x34, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x48, 0x41, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48,
	0x41, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48, 0x41, 0x32,
	0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x32, 0x34, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48,
	0x41, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x05, 0x42, 0x20, 0x5a, 0x1e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x78, 0x78, 0x78, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bundle_proto_rawDescOnce sync.Once
	file_bundle_proto_rawDescData = file_bundle_proto_rawDesc
)

func file_bundle_proto_rawDescGZIP() []byte {
	file_bundle_proto_rawDescOnce.Do(func() {
		file_bundle_proto_rawDescData = protoimpl.X.CompressGZIP(file_bundle_proto_rawDescData)
	})
	return file_bundle_proto_rawDescData
}

var file_bundle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bundle_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bundle_proto_goTypes = []interface{}{
	(HashAlgorithm)(0),      // 0: sigstore.HashAlgorithm
	(*AttestationBlob)(nil), // 1: sigstore.AttestationBlob
	(*RekorEntry)(nil),      // 2: sigstore.RekorEntry
	(*PublicKey)(nil),       // 3: sigstore.PublicKey
	(*X509Cert)(nil),        // 4: sigstore.X509Cert
	(*Bundle)(nil),          // 5: sigstore.Bundle
	(*dsse.Envelope)(nil),   // 6: io.intoto.Envelope
}
var file_bundle_proto_depIdxs = []int32{
	0, // 0: sigstore.AttestationBlob.algorithm:type_name -> sigstore.HashAlgorithm
	2, // 1: sigstore.Bundle.rekor_entry:type_name -> sigstore.RekorEntry
	3, // 2: sigstore.Bundle.public_key:type_name -> sigstore.PublicKey
	4, // 3: sigstore.Bundle.x509_cert:type_name -> sigstore.X509Cert
	1, // 4: sigstore.Bundle.blob:type_name -> sigstore.AttestationBlob
	6, // 5: sigstore.Bundle.dsse:type_name -> io.intoto.Envelope
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_bundle_proto_init() }
func file_bundle_proto_init() {
	if File_bundle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bundle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RekorEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bundle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bundle_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Bundle_PublicKey)(nil),
		(*Bundle_X509Cert)(nil),
		(*Bundle_Blob)(nil),
		(*Bundle_Dsse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bundle_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bundle_proto_goTypes,
		DependencyIndexes: file_bundle_proto_depIdxs,
		EnumInfos:         file_bundle_proto_enumTypes,
		MessageInfos:      file_bundle_proto_msgTypes,
	}.Build()
	File_bundle_proto = out.File
	file_bundle_proto_rawDesc = nil
	file_bundle_proto_goTypes = nil
	file_bundle_proto_depIdxs = nil
}
